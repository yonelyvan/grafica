//g++ file.cpp -o m -lGL -lGLU -lglut
#include <GL/glut.h>  
#include <iostream>
using namespace std;

void init(){
  glClearColor(0,0,0,0.0); //establece el color de fondo de la ventana
  glMatrixMode(GL_PROJECTION); //establece el modo de matriz actual.
  gluOrtho2D(0.0,600.0,0.0,600.0);//establece una región de visualización
}

GLubyte fly[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
	0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
	0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
	0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
	0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
	0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
	0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
	0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
	0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
	0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
	0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
	0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
	0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
	0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
	0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08};

//8x16
GLubyte simple_pattern[] = {
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


void set_pixel(int xi, int yi){
  	glBegin(GL_POINTS);
  	glColor3f(1,1,1);
	glVertex2i(xi, yi);
  	glEnd();
  	glFlush();
}
// [i/8,i%8]

int mascara[8][8]={
	{1,1,1,1,1,1,1,1},
	{1,0,0,0,1,0,0,1},
	{1,1,0,1,0,1,0,1},
	{1,0,1,0,0,0,1,1},
	{1,0,1,0,0,0,1,1},
	{1,1,0,1,0,1,0,1},
	{1,0,0,0,1,0,0,1},
	{1,1,1,1,1,1,1,1},
};


void poligono(){
	glClear(GL_COLOR_BUFFER_BIT); 

	int x0=10, y0=10;
	int zoom=5;

	glBegin(GL_LINES);
		glVertex2i(x0+0*zoom,y0+0*zoom);
		glVertex2i(x0+0*zoom,y0+28*zoom);
		glVertex2i(x0+0*zoom,y0+28*zoom);
		glVertex2i(x0+28*zoom,y0+28*zoom);
		glVertex2i(x0+28*zoom,y0+28*zoom);
		glVertex2i(x0+28*zoom,y0+0*zoom);
		glVertex2i(x0+28*zoom,y0+0*zoom);
		glVertex2i(x0+0*zoom,y0+0*zoom);
	glEnd();

	
	int xn=0 ,yn=0;
	for (int i = x0; i < 28*zoom; ++i){
		for (int j = y0; j < 28*zoom; ++j){
			if(mascara[i%8][j%8]){
				cout<<i%8<<j%8<<endl;
				set_pixel(xn+ x0+i%8,yn+ y0+j%8);
			}
			yn=((j-y0)/8)*8;
		}
		xn=((i-x0)/8)*8;
	}


	

/*
	glBegin(GL_LINES);
		glVertex2i(x0+0*zoom,y0+0*zoom);
		glVertex2i(x0+0*zoom,y0+21*zoom);
		glVertex2i(x0+0*zoom,y0+21*zoom);
		glVertex2i(x0+28*zoom,y0+21*zoom);
		glVertex2i(x0+28*zoom,y0+21*zoom);
		glVertex2i(x0+7*zoom,y0+0*zoom);
		glVertex2i(x0+7*zoom,y0+0*zoom);
		glVertex2i(x0+0*zoom,y0+0*zoom);
	glEnd();
*/


	glFlush(); 
}


void patrones(){
	glClear(GL_COLOR_BUFFER_BIT); 
	int x0=10, y0=150;
	int zoom=20;
	
	glEnable(GL_POLYGON_STIPPLE);	
		glColor3f( 0.0f, 1.0f, 0.0f );//verde       
		glPolygonStipple (fly);
		glBegin(GL_POLYGON);
			glVertex2i(x0+0*zoom,y0+0*zoom);
			glVertex2i(x0+0*zoom,y0+21*zoom);
			glVertex2i(x0+28*zoom,y0+21*zoom);
			glVertex2i(x0+7*zoom,y0+0*zoom);
		glEnd();
		
		glPolygonStipple( simple_pattern );
		glColor3f( 0.0f, 0.0f, 1.0f );       
	glDisable(GL_POLYGON_STIPPLE);
  	
  	glFlush(); 
}




int main(int argc, char** argv) {
    glutInit(&argc, argv); //se inicializa GLUT
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);//establece el modo de visualización inicial
    glutInitWindowPosition(50,100);//estableze posición de la ventana inicial
    glutInitWindowSize(600,600);//estableze tamaño de la ventana inicial
    glutCreateWindow("Ejemplo OpenGL");//label de la ventana

    init();
    //glutDisplayFunc(patrones); //visualizacion de una funion
    glutDisplayFunc(poligono); //visualizacion de una funion
    
    glutMainLoop(); //entra al ciclo de procesamiento de eventos GLUT
    exit(0);
}
